# -*- coding: utf-8 -*-
"""Codigo_MVP_Matchday

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10HbU1kZl20gJgK8-MBIZeuppj6aZRfCV
"""

# Importando bibliotecas para desenhar o campo
import pandas as pd
import numpy as np
import streamlit as st

# Puxando o arquivo  com a base de eventos
data = pd.read_csv('C:\\Users\\pedro\\anaconda3\\Lib\\my_python_files\\base_teste_matchday.csv')

# transformando a tabela geral em dataframe

my_df = pd.DataFrame(data)

# Puxando o arquivo com a base de videos

data_videos = pd.read_csv('C:\\Users\\pedro\\anaconda3\\Lib\\my_python_files\\base_teste_matchday_videos.csv')

# Convertendo base de videos para dataframe

my_df_video = pd.DataFrame(data_videos)

# Criar lista com lista única das partidas
Partidas = my_df.Index_Partida.unique()
Partidas = Partidas.tolist()
Partidas.sort()

# Criando dicionario com nome do time visitante em cada partida
dicionario_partidas_visitantes = {}
for id_partida in Partidas:
  adversario = data.loc[data['Index_Partida'] == id_partida, 'Nome_Time_Visitante']
  pd_adversario = pd.DataFrame(adversario)
  data_partida = data.loc[data['Index_Partida'] == id_partida, 'Data']
  pd_data_partida = pd.DataFrame(data_partida)
  adversario = pd_adversario.Nome_Time_Visitante.unique()
  adversario = adversario.tolist()[0]
  data_partida = pd_data_partida.Data.unique()
  data_partida = data_partida.tolist()[0]
  dicionario_partidas_visitantes[id_partida] = adversario + ' - ' + data_partida

# Convertendo dicionario de partidas visitantes em dataframe
df_visitantes = pd.DataFrame(dicionario_partidas_visitantes.items(), columns=['id_partida','nome_visitante'])

# Definindo filtros para stats e partidas
filtros_stats_videos = ['Gols','Assistências','Passes','Finalizações','Duelos','Desarmes','Perdas de posse','Toques']
filtros_partidas_videos = list(dicionario_partidas_visitantes.values())
option_stat_video = st.multiselect('Selecione as estatísticas', filtros_stats_videos)
option_partidas_videos = st.multiselect('Selecione as partidas', filtros_partidas_videos)


# Puxando o id_partida das partidas selecionadas
partidas_selecionadas_videos = pd.DataFrame()

for partida_selecionada in option_partidas_videos:
  partida_selecionada_videos_i = pd.DataFrame(df_visitantes.loc[df_visitantes['nome_visitante']==partida_selecionada])
  partidas_selecionadas_videos = partidas_selecionadas_videos.append(partida_selecionada_videos_i, ignore_index=True)


# criando lista única de ids de partidas selecionadas
lista_id_partidas_selecionadas = partidas_selecionadas_videos.id_partida.unique()
lista_id_partidas_selecionadas = lista_id_partidas_selecionadas.tolist()

# puxando o id dos videos de partidas e estatisticas selecionadas

df_videos_selecionados = pd.DataFrame()

for partida_selecionada in lista_id_partidas_selecionadas:
  for stat_selecionada in option_stat_video:
    df_videos_selecionados_i = pd.DataFrame(my_df_video.loc[(my_df_video['Index_Partida']==partida_selecionada) & (my_df_video['Nome_Stat_Video']==stat_selecionada)])
    df_videos_selecionados = df_videos_selecionados.append(df_videos_selecionados_i)

# puxando lista com index dos videos selecionados
lista_id_videos_selecionados = df_videos_selecionados.Index_Video.unique()
lista_id_videos_selecionados = lista_id_videos_selecionados.tolist()

# puxando videos selecionados e fazendo upload online
for video in lista_id_videos_selecionados:
  video_file = open(f'C:\\Users\\pedro\\anaconda3\\Lib\\my_python_files\\Videos\\{video}.mp4','rb')
  video_bytes = video_file.read()
  st.video(video_bytes)




